name: Configure Branch Protection (Require Member Check)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to protect"
        required: true
        default: "main"

jobs:
  protect:
    runs-on: ubuntu-latest
    steps:
      - name: Validate admin token present
        run: |
          if [ -z "${{ secrets.ADMIN_TOKEN }}" ]; then
            echo "ADMIN_TOKEN is not set. Add a repo/org secret named ADMIN_TOKEN with 'repo' scope to enable auto-configuration." >&2
            exit 1
          fi

      - name: Configure branch protection
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const inputFromCore = (core.getInput('branch') || '').trim();
            const inputFromEvent = (context.payload?.inputs?.branch || '').trim();
            const defaultBranch = context.payload?.repository?.default_branch;
            const branch = inputFromCore || inputFromEvent || defaultBranch || 'main';

            // Validate branch exists to avoid 404
            try {
              await github.rest.repos.getBranch({ owner, repo, branch });
            } catch (e) {
              core.setFailed(`Branch '${branch}' not found. Provide a valid branch via workflow input.`);
              return;
            }

            core.info(`Applying protection to ${owner}/${repo}@${branch}`);
            // This check name is how GitHub renders Actions checks in branch protection UI:
            // "<workflow name> / <job id>"
            const requiredContexts = [
              'Add Member from PR Template / add-member'
            ];

            // Fetch existing protection (ignore 404)
            let current;
            try {
              const res = await github.rest.repos.getBranchProtection({ owner, repo, branch });
              current = res.data;
            } catch (e) {
              if (e.status !== 404) throw e;
            }

            const existingContexts = current?.required_status_checks?.contexts || [];
            const mergedContexts = Array.from(new Set([ ...existingContexts, ...requiredContexts ]));

            await github.rest.repos.updateBranchProtection({
              owner,
              repo,
              branch,
              required_status_checks: {
                strict: true,
                contexts: mergedContexts,
              },
              enforce_admins: true,
              required_pull_request_reviews: {
                required_approving_review_count: 1,
              },
              restrictions: null,
              required_linear_history: false,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: true,
              lock_branch: false,
              allow_fork_syncing: true,
            });
            core.info(`Updated protection on ${owner}/${repo}@${branch} with required checks: ${mergedContexts.join(', ')}`);

      - name: Summary
        run: |
          echo "Branch protection updated to require: 'Add Member from PR Template / add-member'" >> $GITHUB_STEP_SUMMARY


